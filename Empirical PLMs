{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "42682db4-75e0-4b89-8b2f-d50ac4e66622",
   "metadata": {},
   "source": [
    "<p style=\"font-family: 'Courier New', Courier, monospace; font-size: 30px; font-weight: bold; color: blue;  text-align: left;\">\n",
    " Empirical Path Loss Models Comparison \n",
    "</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2009f8ab-fb42-45d1-b67e-5ef45ad8bd8b",
   "metadata": {},
   "source": [
    "#### Import of libraries used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34bb1f4d-08db-4b19-bd8a-2f5d80e685f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14788121-1ae8-430a-9038-a620e4c02220",
   "metadata": {},
   "source": [
    "#### Load the cleaned data into `df` and inspect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b0dd56f-77d2-4a5a-89ab-da2eedffa065",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('../all_data_files/cleaned_dataset_per_device.csv')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19772419-335b-459c-ac6b-cdec0554ac43",
   "metadata": {},
   "source": [
    "#### Compute and plot average exp_pl vs. distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "952507ae-0546-4883-be4f-e1c167a0849d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group by distance and take the mean of exp_pl\n",
    "avg_exp_pl = df.groupby('distance')['exp_pl'].mean().reset_index()\n",
    "\n",
    "# Create figure/axes\n",
    "fig, ax = plt.subplots(figsize=(6, 3))\n",
    "\n",
    "# 1) Raw points underneath\n",
    "ax.scatter(df['distance'], df['exp_pl'], marker='x', alpha=0.4, label='Raw exp_pl', zorder=1)\n",
    "\n",
    "# 2) Averages on top\n",
    "ax.scatter(avg_exp_pl['distance'], avg_exp_pl['exp_pl'],  marker='o', s=200, label='Avg exp_pl', zorder=2)\n",
    "\n",
    "# Labels and title\n",
    "ax.set_xlabel('Distance')\n",
    "ax.set_ylabel('exp_pl')\n",
    "ax.set_title('Average vs. Raw exp_pl by Distance')\n",
    "\n",
    "# Legend outside right\n",
    "ax.legend(bbox_to_anchor=(1.05, 0.5), loc='upper left', borderaxespad=0.)\n",
    "\n",
    "# Improving legend layout\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(right=0.75)\n",
    "\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dffa1e5a-364e-48ae-a71e-3ea93ad20abb",
   "metadata": {},
   "source": [
    "### Baseline: FSPL at 868 MHz vs. Averaged Path-Loss\n",
    "\n",
    "We use the free-space reference model at a fixed, representative frequency  \n",
    "$$\n",
    "L_{\\mathrm{FS}}(d)\n",
    "=20\\log_{10}\\!\\Bigl(\\frac{4\\pi\\,d\\,f_0}{c}\\Bigr),\n",
    "$$\n",
    "with  \n",
    "- $c = 3\\times10^8\\ \\mathrm{m/s}$  \n",
    "- $f_0 = 868\\ \\mathrm{MHz}$.  \n",
    "\n",
    "At $d = 1\\ \\mathrm{m}$ this gives  \n",
    "$$\n",
    "L_{\\mathrm{FS}}(1)\n",
    "=20\\log_{10}\\!\\Bigl(\\frac{4\\pi\\cdot1\\cdot868\\times10^6}{3\\times10^8}\\Bigr)\n",
    "\\approx 32\\ \\mathrm{dB}.\n",
    "$$\n",
    "\n",
    "Let  \n",
    "- $\\overline{L}(d_i)$ be the **averaged** measured path-loss at distance $d_i$,  \n",
    "- $\\hat L_i = L_{\\mathrm{FS}}(d_i)$ the model prediction.  \n",
    "\n",
    "We quantify the baseline fit by  \n",
    "$$\n",
    "\\mathrm{RMSE}\n",
    "=\\sqrt{\\frac{1}{N}\\sum_{i=1}^N\\bigl(\\overline{L}(d_i)-\\hat L_i\\bigr)^2},\n",
    "\\quad\n",
    "R^2\n",
    "=1 - \\frac{\\sum_{i=1}^N\\bigl(\\overline{L}(d_i)-\\hat L_i\\bigr)^2}\n",
    "               {\\sum_{i=1}^N\\bigl(\\overline{L}(d_i)-\\bar L\\bigr)^2},\n",
    "$$\n",
    "where $\\bar L = \\frac{1}{N}\\sum_{i=1}^N \\overline{L}(d_i)\\,$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "135e45af-05fc-491a-9032-2e03198664fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Constants and FSPL function at fixed f0=868 MHz\n",
    "c, f0 = 3e8, 868e6  # speed of light (m/s), frequency (Hz)\n",
    "def fspl_fixed(d): return 20 * np.log10(4 * np.pi * d * f0 / c)\n",
    "\n",
    "# Prepare arrays for averaged points\n",
    "d      = avg_exp_pl['distance'].values   # distances in m\n",
    "y_obs  = avg_exp_pl['exp_pl'].values      # measured averages in dB\n",
    "y_pred = fspl_fixed(d)                    # FSPL predictions\n",
    "\n",
    "# Create figure/axes\n",
    "fig, ax = plt.subplots(figsize=(6, 3))\n",
    "\n",
    "# 1) Raw points underneath\n",
    "ax.scatter(df['distance'], df['exp_pl'], marker='x', alpha=0.4, label='Raw exp_pl', zorder=1)\n",
    "# 2) Averages on top\n",
    "ax.scatter(avg_exp_pl['distance'], avg_exp_pl['exp_pl'], marker='o', s=200, label='Avg exp_pl', zorder=2)\n",
    "# 3) FSPL model as scatter\n",
    "ax.scatter(d, y_pred, marker='o', s=200, color='green', label='FSPL @868 MHz', zorder=3)\n",
    "\n",
    "# Labels and title\n",
    "ax.set_xlabel('Distance (m)')\n",
    "ax.set_ylabel('Path Loss (dB)')\n",
    "ax.set_title('Raw, Averaged & FSPL Model')\n",
    "\n",
    "# Legend outside right\n",
    "ax.legend(bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0.)\n",
    "\n",
    "# Improving layout to fit legend\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(right=0.75)\n",
    "\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Compute RMSE and R² on the averaged points\n",
    "rmse = np.sqrt(mean_squared_error(y_obs, y_pred))\n",
    "r2   = r2_score(y_obs, y_pred)\n",
    "print(f\"\\nBaseline FSPL @868 MHz → RMSE = {rmse:.2f} dB,  R² = {r2:.3f}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70be6060-9bbc-425e-9b45-ca1ee1cbee4f",
   "metadata": {},
   "source": [
    "### Floating-Intercept Log-Distance Model\n",
    "\n",
    "We extend the FSPL baseline with a fitted, one-slope model at reference distance $(d_0 = 1)$ m:\n",
    "\n",
    "$$\n",
    "L(d) = b_0 + 10\\,n\\,\\log_{10}\\!\\bigl(\\tfrac{d}{d_0}\\bigr) + X_\\sigma,\n",
    "$$\n",
    "\n",
    "where  \n",
    "- $b_0$ is the fitted close-in reference loss (dB),  \n",
    "- $n$ is the path-loss exponent,  \n",
    "- $X_\\sigma \\sim \\mathcal{N}(0,\\sigma^2)$ captures shadow fading.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a895a2f5-dc14-4d52-b30f-9da2ecde806c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit floating-intercept log-distance on raw samples\n",
    "d0 = 1.0\n",
    "X_raw = np.log10(df['distance'].values.reshape(-1,1) / d0)\n",
    "y_raw = df['exp_pl'].values\n",
    "\n",
    "model = LinearRegression(fit_intercept=True).fit(X_raw, y_raw)\n",
    "b0, b1 = model.intercept_, model.coef_[0]\n",
    "n_hat = b1 / 10.0\n",
    "\n",
    "# Predict on raw and compute metrics\n",
    "df['y_pred'] = model.predict(X_raw)\n",
    "rmse_raw = np.sqrt(mean_squared_error(y_raw, df['y_pred']))\n",
    "r2_raw   = r2_score(y_raw, df['y_pred'])\n",
    "\n",
    "# Average measured and predicted by distance\n",
    "avg_obs  = df.groupby('distance',   as_index=False)['exp_pl'].mean()\n",
    "avg_pred = df.groupby('distance',   as_index=False)['y_pred'].mean()\n",
    "\n",
    "# Plot raw, averaged observations, averaged predictions\n",
    "fig, ax = plt.subplots(figsize=(6, 3))\n",
    "ax.scatter(df['distance'], df['exp_pl'],        marker='x', alpha=0.2, label='Raw exp_pl', zorder=1)\n",
    "ax.scatter(avg_obs['distance'], avg_obs['exp_pl'], marker='o', s=200, label='Avg measured', zorder=2)\n",
    "ax.scatter(avg_pred['distance'], avg_pred['y_pred'], marker='o', s=200, color='black', label='Avg model', zorder=3)\n",
    "\n",
    "ax.set_xlabel('Distance (m)')\n",
    "ax.set_ylabel('Path Loss (dB)')\n",
    "ax.set_title('Raw, Averaged Observations & Log-Distance Model')\n",
    "ax.legend(bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0.)\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(right=0.75)\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Print fitted parameters and metrics\n",
    "print(f\"\\nFitted offset b0 = {b0:.2f} dB (FSPL@1m≈32 dB), n = {n_hat:.2f}\")\n",
    "print(f\"Log-distance fit → RMSE = {rmse_raw:.2f} dB, R² = {r2_raw:.3f}\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c032a1-5454-4cc5-b156-ef83dd2c175d",
   "metadata": {},
   "source": [
    "### COST 231 Multi-Wall Model (No Floor Losses)\n",
    "\n",
    "We apply a simplified version of the COST 231 model using only wall-based attenuation:\n",
    "\n",
    "$$\n",
    "L(d) = L_{1} + N \\log_{10}(d) + N_c L_c + N_w L_w,\n",
    "$$\n",
    "\n",
    "where  \n",
    "- $L_1$ is the fitted reference loss at $1\\,\\mathrm{m}$ (dB),  \n",
    "- $N$ is the empirical distance-loss slope (dB/decade),  \n",
    "- $N_c$ and $N_w$ are the number of **concrete** and **wood/glass** walls, respectively,  \n",
    "- $L_c$ and $L_w$ are the learned attenuation factors per wall type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "589dfc8b-cd67-4fd8-b2c3-ed07eabdad06",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Compute log-distance and build predictors\n",
    "df['log_d'] = np.log10(df['distance'])\n",
    "\n",
    "#  Prepare design matrix and target\n",
    "X = df[['log_d', 'c_walls', 'w_walls']].values\n",
    "y = df['exp_pl'].values\n",
    "\n",
    "# Fit COST 231-style linear model\n",
    "model = LinearRegression(fit_intercept=True).fit(X, y)\n",
    "L1 = model.intercept_\n",
    "N, Lc, Lw = model.coef_\n",
    "\n",
    "#  Predict and evaluate\n",
    "df['y_pred_cost231'] = model.predict(X)\n",
    "rmse_c231 = np.sqrt(mean_squared_error(y, df['y_pred_cost231']))\n",
    "r2_c231   = r2_score(y, df['y_pred_cost231'])\n",
    "\n",
    "#  Average measured and predicted values by distance\n",
    "avg_exp_pl     = df.groupby('distance', as_index=False)['exp_pl'].mean()\n",
    "avg_pred_cost  = df.groupby('distance', as_index=False)['y_pred_cost231'].mean()\n",
    "\n",
    "# 6. Plot: raw, averaged measurements, and model predictions\n",
    "fig, ax = plt.subplots(figsize=(6, 3))\n",
    "\n",
    "# Raw\n",
    "ax.scatter(df['distance'], df['exp_pl'], marker='x', alpha=0.4, label='Raw exp_pl', zorder=1)\n",
    "\n",
    "# Avg observed\n",
    "ax.scatter(avg_exp_pl['distance'], avg_exp_pl['exp_pl'], marker='o', s=200, label='Avg exp_pl', zorder=2)\n",
    "\n",
    "# Avg predicted (COST 231)\n",
    "ax.scatter(avg_pred_cost['distance'], avg_pred_cost['y_pred_cost231'], marker='D', s=200, color='black', label='Avg COST 231', zorder=3)\n",
    "\n",
    "# Labels and formatting\n",
    "ax.set_xlabel('Distance (m)')\n",
    "ax.set_ylabel('Path Loss (dB)')\n",
    "ax.set_title('Raw, Averaged & COST 231 Model')\n",
    "\n",
    "# Legend outside\n",
    "ax.legend(bbox_to_anchor=(1.05, 0.5), loc='center left', borderaxespad=0.)\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(right=0.75)\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "print(f\"\\nCOST 231 fit → L1 = {L1:.2f} dB, N = {N:.2f}, L_c = {Lc:.2f} dB, L_w = {Lw:.2f} dB\")\n",
    "print(f\"RMSE = {rmse_c231:.2f} dB, R² = {r2_c231:.3f}\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (mlmodels_env)",
   "language": "python",
   "name": "mlmodels_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
